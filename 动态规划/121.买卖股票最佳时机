给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

总结：对于多阶段问题，第i天买卖股票状态j,使用动态规划记录操作

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0)
            return 0;
        //多阶段问题定义状态：第i天股票持有的方式j;
        int[][] dp = new int[prices.length][2];
        //初始化
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i=1;i<dp.length;i++){
            //第i天没有股票的资产：1.没有卖出股票 2.卖了股票
            dp[i][0] = Math.max(dp[i-1][0], prices[i] + dp[i-1][1]);
            //第i天有股票的资产：1.没有卖出股票 2.由于只能买一只股票，资产即为-prices[i]
            dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
        }
        return dp[dp.length-1][0];
    }
}

时间复杂度：O(n)
空间复杂度：O(n)

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0)
            return 0;
        //多阶段问题定义状态：第i天股票持有的方式j;
        int[][] dp = new int[prices.length][2];
        //初始化
        int pre0=0,current0=0,current1=0,pre1=-prices[0];
        for(int i=1;i<dp.length;i++){
            current0 = Math.max(pre0, prices[i] + pre1);
            current1 = Math.max(pre1, -prices[i]);
            pre0=current0;
            pre1=current1;
        }
        return current0;
    }
}

时间复杂度：O(n)
空间复杂度：O(1)
