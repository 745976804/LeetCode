输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。

要求时间复杂度为O(n)。

示例1:

输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

class Solution {
    public int maxSubArray(int[] nums) {
        int[] pre = new int[nums.length];
        pre[0]=nums[0];
        int max=nums[0];
        for(int i=1;i<nums.length;i++){
            if(pre[i-1]>0)
                pre[i] = nums[i] + pre[i-1];
            else
                pre[i]=nums[i];
            max = Math.max(pre[i],max);
        }
        return max;
    }
}

总结：

第一步：问题分析：求子数组的和的最大值   ==>>  是一个求最优解的题目，同时在遍历过程中，决定最大值的是前面子数组的和是否>0，说明我们需要保留前面元素的信息    ==>>    动态规划

第二步：状态定义：对于第i个元素来说，有两种情况：
    第一种：第i-1个元素<0，此时最大连续子数组的和为max(之前最大值,第i个元素值)
    第二种：第i-1个元素>0，此时最大连续子数组的和为max(之前最大值,第i个元素值+第i-1个元素值)
    
第三步：根据状态定义建立状态转移方程
    dp[i]=nums[i],(dp[i-1]<0),            max = Math.max(dp[i],max)
    dp[i]=nums[i]+dp[i-1],(dp[i-1]>0),    max = Math.max(dp[i],max)
    
第四步：代码实现
