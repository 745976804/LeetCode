定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。

示例:

输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL 

限制：

0 <= 节点个数 <= 5000

执行结果：通过
执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
内存消耗：38.3 MB, 在所有 Java 提交中击败了61.62%的用户

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/*
 //迭代法
class Solution {
    public ListNode reverseList(ListNode head) {
        //pre:pre为处理之后链表的头节点;cur:为下一个要处理的链表节点
        ListNode pre = null, cur = head;
        while(cur!=null){
            ListNode temp = cur;
            cur = cur.next;
            temp.next = pre;
            pre = temp;
        }
        return pre;
    }
}

 //递归法
class Solution {
    public ListNode reverseList(ListNode head) {
        //pre:为处理之后链表的头节点;cur:为下一个要处理的链表节点
        return reverse(null,head);
    }

    private ListNode reverse(ListNode pre, ListNode cur){
        if(cur==null)   return pre;
        ListNode temp = cur;
        cur = cur.next;
        temp.next = pre;
        pre = temp;
        return reverse(pre, cur);
    }
}
*/
