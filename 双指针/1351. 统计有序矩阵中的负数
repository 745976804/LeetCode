给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 

请你统计并返回 grid 中 负数 的数目。 

示例 1：

输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
输出：8
解释：矩阵中共有 8 个负数。
示例 2：

输入：grid = [[3,2],[1,0]]
输出：0
示例 3：

输入：grid = [[1,-1],[-1,-1]]
输出：3
示例 4：

输入：grid = [[-1]]
输出：1

class Solution {
    /*
    public int countNegatives(int[][] grid) {
        //很明显的数组具有特定顺序，==>双指针法
        //起始位置设置为左下角或者右上角，这里选择左下角：有以下情况
        //1.左下角元素<0,则右侧元素均<0;计数,并向上遍历。
        //2.左下角元素>0,则继续向右遍历，直到找到<0的元素,计数,终止循环,并向上遍历。
        //3.左下角元素==0,则继续向右遍历，直到找到<0的元素,计数,并向上遍历。
        int cnt=0,i=grid.length-1,j;
        while(i>=0){
            j=0;
            while(j<grid[0].length){
                if(grid[i][j]<0){
                    cnt=cnt+grid[0].length-j;
                    break;
                }
                else{
                    j++;
                }
            }
            i--;
        }
        return cnt;
    }
    */

    public int countNegatives(int[][] grid) {
        //很明显的数组具有特定顺序，==>双指针法
        //起始位置设置为左下角或者右上角，这里选择左下角：有以下情况
        //1.左下角元素<0,则右侧元素均<0;计数,并向上遍历。
        //2.左下角元素>0,则继续向右遍历，直到找到<0的元素,计数,终止循环,并向上遍历。
        //3.左下角元素==0,则继续向右遍历，直到找到<0的元素,计数,并向上遍历。
        int cnt=0;
        for(int i=grid.length-1;i>=0;i--){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]<0){
                    cnt=cnt+grid[0].length-j;
                    break;
                }
            }
        }
        return cnt;
    }
}
