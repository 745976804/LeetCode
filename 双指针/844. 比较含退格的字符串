给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。

注意：如果对空文本输入退格字符，文本继续为空。

 

示例 1：

输入：S = "ab#c", T = "ad#c"
输出：true
解释：S 和 T 都会变成 “ac”。
示例 2：

输入：S = "ab##", T = "c#d#"
输出：true
解释：S 和 T 都会变成 “”。
示例 3：

输入：S = "a##c", T = "#a#c"
输出：true
解释：S 和 T 都会变成 “c”。
示例 4：

输入：S = "a#c", T = "b"
输出：false
解释：S 会变成 “c”，但 T 仍然是 “b”。

自己写的：
class Solution {
    public boolean backspaceCompare(String S, String T) {
        //用栈的特性来    重构字符串
        Stack<Character> stack1 = new Stack<Character>();
        Stack<Character> stack2 = new Stack<Character>();
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='#' && !stack1.isEmpty())
                stack1.pop();
            else if(S.charAt(i)!='#')
                stack1.push(S.charAt(i));
        }
        for(int i=0;i<T.length();i++){
            if(T.charAt(i)=='#' && !stack2.isEmpty())
                stack2.pop();
            else if(T.charAt(i)!='#')
                stack2.push(T.charAt(i));
        }
        //1.不匹配返回false
        while(!stack1.isEmpty() && !stack2.isEmpty()){
            if(stack1.pop()!=stack2.pop())
                return false;
        }
        //2.长度不相等返回false
        if(!stack1.isEmpty() || !stack2.isEmpty())
            return false;
        //3.返回true
        return true;
    }
}

时间复杂度：O(m+n)
空间复杂度：O(m+n)


方法二：双指针
思路

一个字符是否属于最终字符串的一部分，取决于它后面有多少个退格符。

如果反向遍历字符串，就可以先知道有多少个退格符，然后知道退格符左边有多少个字符会被删除，对应的也就知道哪些字符会保留在最终的字符串中。

算法

反向遍历字符串，如果遍历到一个退格符，那么再往左第一个非退格字符将会被删除，剩余未被删除的字符就是最终的字符串。

时间复杂度：O(M + N)O(M+N)
空间复杂度：O(1)

总结：
    1.先要分清题目，才能明白为什么用双指针（题目中有两个不同的部分：普通的字符和#），一个指针找特殊的#，另一个要形成新字符串
    双指针使用时不能破坏数组结构
