给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

进阶：

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
 

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]
示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]
示例 3：

输入：nums = [], target = 0
输出：[-1,-1]

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0)  return new int[]{-1,-1};
        if(target<nums[0] || target>nums[nums.length-1])    return new int[]{-1,-1};
        int left = 0, right = nums.length - 1;
        //1.迭代终止条件
        while(nums[left]!=nums[right] && left<=right){
            int mid = (right - left) / 2 + left;
            //2.划分区间：[left,mid];[mid+1,right]
            if(nums[mid]<target){
                left = mid + 1;
            }
            else if(nums[mid]>target){
                right = mid;
            }
            else{
                //3.出现相同情况时如何缩小区间
                if(nums[left]<target)   left++;
                if(nums[right]>target)  right--;
            }
        }
        //System.out.println("left:"+left+"right:"+right);
        return nums[left]!=target || nums[right]!= target 
        ? new int[]{-1,-1} : new int[]{left,right};
    }
}
