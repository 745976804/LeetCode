请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。

[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

示例 1：

输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true
示例 2：

输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false
提示：

1 <= board.length <= 200
1 <= board[i].length <= 200

class Solution {
    char[] strArr;
    char[][] board;
    public boolean exist(char[][] board, String word) {
        //1.预处理
        this.board = board;
        this.strArr = word.toCharArray();
        boolean res = false;
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j]==strArr[0]){
                    res = res || dfs(i,j,0);
                    if(res) return true;
                }
            }
        }
        return res;
    }

    private boolean dfs(int row, int col, int index){
        //2.递归终止条件
        if(index==strArr.length)    return true;
        if(row<0 || row>=board.length || col<0 || col>=board[0].length)  return false;
        if(board[row][col]!=strArr[index])  return false;
        //3.记录当前遍历到的字符，将当前位置的字符设置无效化，避免重复遍历
        char temp = board[row][col];
        board[row][col] = '0';
        //4.递归
        boolean res =  dfs(row + 1, col, index + 1) || dfs(row - 1, col, index + 1) 
        || dfs(row, col + 1, index + 1) || dfs(row, col - 1, index + 1);
        //5.回溯
        board[row][col] = temp;
        return res;
    }
}

执行结果：通过
显示详情

执行用时：
5 ms, 在所有 Java 提交中击败了97.86%的用户

内存消耗：
40.2 MB, 在所有 Java 提交中击败了83.08%的用户
