用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )

示例 1：

输入：
["CQueue","appendTail","deleteHead","deleteHead"]
[[],[3],[],[]]
输出：[null,null,3,-1]

示例 2：

输入：
["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
[[],[],[5],[2],[],[]]
输出：[null,-1,null,null,5,2]

/*
数据结构：2个栈=》链表
分成两个操作，并了解每个函数的意义，进行实现
操作：“队列尾部”插入整数    +       “队列头部”删除整数
*/
class CQueue {
    LinkedList<Integer> stack1,stack2;
    public CQueue() {
        stack1 = new LinkedList<Integer>();
        stack2 = new LinkedList<Integer>();
    }
    //appendTail:在插入栈中，压入整数
    public void appendTail(int value) {
        stack1.add(value);
    }
    //deleteHead:在删除栈中，
    //1.有整数，删除整数
    //2.无整数，先压入整数，再删除。
    public int deleteHead() {
        if(!stack2.isEmpty())
            return stack2.pop();
        if(stack1.isEmpty())
            return -1;
        while(!stack1.isEmpty())
            stack2.add(stack1.pop());
        return stack2.pop();
    }
}

/**
 * Your CQueue object will be instantiated and called as such:
 * CQueue obj = new CQueue();
 * obj.appendTail(value);
 * int param_2 = obj.deleteHead();
 */

总结：降低耦合性，每个栈实现单个功能。
