输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。

示例：

输入：nums = [1,2,3,4]
输出：[1,3,2,4] 
注：[3,1,2,4] 也是正确的答案之一。
 

提示：

1 <= nums.length <= 50000
1 <= nums[i] <= 10000

执行结果：通过
执行用时：2 ms, 在所有 Java 提交中击败了99.38%的用户
内存消耗：46.5 MB, 在所有 Java 提交中击败了69.88%的用户

class Solution {
    public int[] exchange(int[] nums) {
        //双指针
        //1.从左向右找找到偶数
        //2.从数组末尾开始找，找到奇数与其交换
        int left = 0, right = nums.length - 1;
        while(left<right){
            if((nums[left]&1)==0){
                while(right>left && (nums[right]&1)==0) right--;               
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
            }
            left++;
        }
        return nums;
    }
}
